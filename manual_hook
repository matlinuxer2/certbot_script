#!/usr/bin/env python3

import json
import os
import requests
import sys
import time
import subprocess

CERTBOT_VALIDATION = os.getenv("CERTBOT_VALIDATION") # This value is passed by certbot
CERTBOT_DOMAIN = os.getenv("CERTBOT_DOMAIN") # This environment variable is passed by certbot
GANDI_APIKEY = os.getenv("GANDI_APIKEY")
DEBUG = os.getenv("DEBUG")
DNS_SERVERS = os.getenv("DNS_SERVERS")
TTL = 300

def run_cmd(cmd):
    p = subprocess.Popen( cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    output_raw = p.communicate()[0]
    result = output_raw.decode('utf8')

    return result

def get_dns_servers(domainname):
    dns_srv = "8.8.8.8"
    cmd = "dig @%s %s NS +noall +answer | awk '{print $5}' | sed -e 's/.$//g'" % ( dns_srv, domainname )
    res = run_cmd(cmd)
    result = res.strip().split("\n")

    return result

def get_dns_txt(dnsname):
    result = []

    dns_servers = []
    if DNS_SERVERS:
        dns_servers = DNS_SERVERS.strip().split(",")

    if len(dns_servers) <=0 :
        return result


    for dns_serv in dns_servers:
        cmd = "dig @%s %s TXT +noall +answer | awk '{print $5}' | sed -e 's/^\"//g' -e 's/\"$//g'" % (dns_serv, dnsname)
        res = run_cmd( cmd )
        items = res.strip().split("\n")
        for item in items:
            if not item in result:
                result.append(item)

    return result


class GandiMgr:
    url = "https://dns.api.gandi.net/api/v5"
    apikey = None
    domain = None

    def __init__(self, apikey, domain ):
        self.apikey = apikey
        self.domain = domain

    def dns_rec_get( self, name ):
        result = None

        if self.domain:
            url_dst = "/".join([self.url, "domains", self.domain, "records", name])
            res = requests.get( url_dst, headers={ "X-Api-Key": self.apikey, "Accept": "text/plain" } )
            if res.json():
                result = res.json()[0]["rrset_values"]

        return result

    def dns_rec_set( self, name, type, ttl, value ):
        url_dst = "/".join([self.url, "domains", self.domain, "records", name])

        orig = self.dns_rec_get( name )
        if DEBUG:
            print( ">>> orig:", orig )

        if orig and len(orig) > 0:
            values = []
            for item in orig:
                val = item
                if val.__len__() >=2 and val[0] == '"' and val[-1] == '"':
                    val = val[1:-1]
                values.append(val)
            values.append(value)

            payload = { "items": [{
                "rrset_type": type,
                "rrset_ttl": ttl,
                "rrset_values": values,
                }]
            }

            if DEBUG:
                print( ">>> payload:", payload)

            res = requests.put( url_dst, headers={ "X-Api-Key": self.apikey, "Content-Type": "application/json" }, data=json.dumps(payload) )

        else:
            payload = {
                "rrset_type": type,
                "rrset_ttl": ttl,
                "rrset_values": [ value ],
            }
            if DEBUG:
                print( ">>> payload:", payload)
            res = requests.post( url_dst, headers={ "X-Api-Key": self.apikey, "Content-Type": "application/json" }, data=json.dumps(payload) )

        return

    def dns_rec_del( self, name ):
        url_dst = "/".join([self.url, "domains", self.domain, "records", name])
        res = requests.delete( url_dst, headers={ "X-Api-Key": self.apikey, "Content-Type": "application/json" } )

        return

if __name__ == '__main__':
    if sys.argv.__len__() >= 1:
        cmd = sys.argv[1]

        if DEBUG:
            print("CERTBOT_VALIDATION:", CERTBOT_VALIDATION)
            print("CERTBOT_DOMAIN:", CERTBOT_DOMAIN)
            print("cmd:", cmd)

        if cmd == "auth":
            g = GandiMgr( GANDI_APIKEY, CERTBOT_DOMAIN )
            g.dns_rec_set( "_acme-challenge", "TXT", TTL, CERTBOT_VALIDATION )

            chk_dnsname = "_acme-challenge" + "." + CERTBOT_DOMAIN
            timeout = TTL
            step_sleep = 5
            isFound = False
            while timeout > 0:
                res2 = get_dns_txt(chk_dnsname)
                if DEBUG:
                    print( "timeout:", timeout , "current_txt_dns result:", res2)

                if CERTBOT_VALIDATION in res2:
                    isFound = True
                    break;

                timeout -= step_sleep
                time.sleep( step_sleep )

            if isFound:
                print("[OK] "+chk_dnsname+" has been updated to "+CERTBOT_VALIDATION+" .")
            else:
                print("[FAILED] "+chk_dnsname+" failed to update.")
                exit(1)

        if cmd == "cleanup":
            g = GandiMgr( GANDI_APIKEY, CERTBOT_DOMAIN )
            g.dns_rec_del( "_acme-challenge" )
